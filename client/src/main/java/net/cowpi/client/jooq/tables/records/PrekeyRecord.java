/*
 * This file is generated by jOOQ.
 */
package net.cowpi.client.jooq.tables.records;


import javax.annotation.Generated;

import net.cowpi.client.jooq.tables.Prekey;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PrekeyRecord extends UpdatableRecordImpl<PrekeyRecord> implements Record4<Integer, Integer, Integer, byte[]> {

    private static final long serialVersionUID = 1225024938;

    /**
     * Setter for <code>prekey.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>prekey.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>prekey.user_id</code>.
     */
    public void setUserId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>prekey.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>prekey.key_id</code>.
     */
    public void setKeyId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>prekey.key_id</code>.
     */
    public Integer getKeyId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>prekey.prekey</code>.
     */
    public void setPrekey(byte... value) {
        set(3, value);
    }

    /**
     * Getter for <code>prekey.prekey</code>.
     */
    public byte[] getPrekey() {
        return (byte[]) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, Integer, byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, Integer, byte[]> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Prekey.PREKEY.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Prekey.PREKEY.USER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Prekey.PREKEY.KEY_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field4() {
        return Prekey.PREKEY.PREKEY_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getUserId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getKeyId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] component4() {
        return getPrekey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getUserId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getKeyId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value4() {
        return getPrekey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrekeyRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrekeyRecord value2(Integer value) {
        setUserId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrekeyRecord value3(Integer value) {
        setKeyId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrekeyRecord value4(byte... value) {
        setPrekey(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrekeyRecord values(Integer value1, Integer value2, Integer value3, byte[] value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PrekeyRecord
     */
    public PrekeyRecord() {
        super(Prekey.PREKEY);
    }

    /**
     * Create a detached, initialised PrekeyRecord
     */
    public PrekeyRecord(Integer id, Integer userId, Integer keyId, byte[] prekey) {
        super(Prekey.PREKEY);

        set(0, id);
        set(1, userId);
        set(2, keyId);
        set(3, prekey);
    }
}
