/*
 * This file is generated by jOOQ.
 */
package net.cowpi.oes.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import net.cowpi.oes.jooq.DefaultSchema;
import net.cowpi.oes.jooq.Indexes;
import net.cowpi.oes.jooq.Keys;
import net.cowpi.oes.jooq.tables.records.ConversationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Conversation extends TableImpl<ConversationRecord> {

    private static final long serialVersionUID = -282261910;

    /**
     * The reference instance of <code>conversation</code>
     */
    public static final Conversation CONVERSATION = new Conversation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConversationRecord> getRecordType() {
        return ConversationRecord.class;
    }

    /**
     * The column <code>conversation.id</code>.
     */
    public final TableField<ConversationRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('oes_1.conversation_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>conversation.conversation_id</code>.
     */
    public final TableField<ConversationRecord, Long> CONVERSATION_ID = createField("conversation_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>conversation.next_index</code>.
     */
    public final TableField<ConversationRecord, Long> NEXT_INDEX = createField("next_index", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>conversation</code> table reference
     */
    public Conversation() {
        this(DSL.name("conversation"), null);
    }

    /**
     * Create an aliased <code>conversation</code> table reference
     */
    public Conversation(String alias) {
        this(DSL.name(alias), CONVERSATION);
    }

    /**
     * Create an aliased <code>conversation</code> table reference
     */
    public Conversation(Name alias) {
        this(alias, CONVERSATION);
    }

    private Conversation(Name alias, Table<ConversationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Conversation(Name alias, Table<ConversationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Conversation(Table<O> child, ForeignKey<O, ConversationRecord> key) {
        super(child, key, CONVERSATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONVERSATION_CONVERSATION_ID_KEY, Indexes.CONVERSATION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ConversationRecord, Long> getIdentity() {
        return Keys.IDENTITY_CONVERSATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ConversationRecord> getPrimaryKey() {
        return Keys.CONVERSATION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ConversationRecord>> getKeys() {
        return Arrays.<UniqueKey<ConversationRecord>>asList(Keys.CONVERSATION_PKEY, Keys.CONVERSATION_CONVERSATION_ID_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Conversation as(String alias) {
        return new Conversation(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Conversation as(Name alias) {
        return new Conversation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Conversation rename(String name) {
        return new Conversation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Conversation rename(Name name) {
        return new Conversation(name, null);
    }
}
