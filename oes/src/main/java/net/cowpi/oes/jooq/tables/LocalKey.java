/*
 * This file is generated by jOOQ.
 */
package net.cowpi.oes.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import net.cowpi.oes.jooq.DefaultSchema;
import net.cowpi.oes.jooq.Indexes;
import net.cowpi.oes.jooq.Keys;
import net.cowpi.oes.jooq.tables.records.LocalKeyRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LocalKey extends TableImpl<LocalKeyRecord> {

    private static final long serialVersionUID = 1693829539;

    /**
     * The reference instance of <code>local_key</code>
     */
    public static final LocalKey LOCAL_KEY = new LocalKey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LocalKeyRecord> getRecordType() {
        return LocalKeyRecord.class;
    }

    /**
     * The column <code>local_key.id</code>.
     */
    public final TableField<LocalKeyRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('oes_1.local_key_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>local_key.state</code>.
     */
    public final TableField<LocalKeyRecord, Long> STATE = createField("state", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>local_key.local_ephemeral_key_id</code>.
     */
    public final TableField<LocalKeyRecord, Long> LOCAL_EPHEMERAL_KEY_ID = createField("local_ephemeral_key_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>local_key.local_ephemeral_priv_key</code>.
     */
    public final TableField<LocalKeyRecord, byte[]> LOCAL_EPHEMERAL_PRIV_KEY = createField("local_ephemeral_priv_key", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * Create a <code>local_key</code> table reference
     */
    public LocalKey() {
        this(DSL.name("local_key"), null);
    }

    /**
     * Create an aliased <code>local_key</code> table reference
     */
    public LocalKey(String alias) {
        this(DSL.name(alias), LOCAL_KEY);
    }

    /**
     * Create an aliased <code>local_key</code> table reference
     */
    public LocalKey(Name alias) {
        this(alias, LOCAL_KEY);
    }

    private LocalKey(Name alias, Table<LocalKeyRecord> aliased) {
        this(alias, aliased, null);
    }

    private LocalKey(Name alias, Table<LocalKeyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> LocalKey(Table<O> child, ForeignKey<O, LocalKeyRecord> key) {
        super(child, key, LOCAL_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LOCAL_KEY_PKEY, Indexes.LOCAL_KEY_STATE_LOCAL_EPHEMERAL_KEY_ID_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LocalKeyRecord, Long> getIdentity() {
        return Keys.IDENTITY_LOCAL_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LocalKeyRecord> getPrimaryKey() {
        return Keys.LOCAL_KEY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LocalKeyRecord>> getKeys() {
        return Arrays.<UniqueKey<LocalKeyRecord>>asList(Keys.LOCAL_KEY_PKEY, Keys.LOCAL_KEY_STATE_LOCAL_EPHEMERAL_KEY_ID_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<LocalKeyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LocalKeyRecord, ?>>asList(Keys.LOCAL_KEY__LOCAL_KEY_STATE_FKEY);
    }

    public ParticipantState participantState() {
        return new ParticipantState(this, Keys.LOCAL_KEY__LOCAL_KEY_STATE_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalKey as(String alias) {
        return new LocalKey(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalKey as(Name alias) {
        return new LocalKey(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LocalKey rename(String name) {
        return new LocalKey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LocalKey rename(Name name) {
        return new LocalKey(name, null);
    }
}
