/*
 * This file is generated by jOOQ.
 */
package net.cowpi.oes.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import net.cowpi.oes.jooq.DefaultSchema;
import net.cowpi.oes.jooq.Indexes;
import net.cowpi.oes.jooq.Keys;
import net.cowpi.oes.jooq.tables.records.ParticipantStateRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ParticipantState extends TableImpl<ParticipantStateRecord> {

    private static final long serialVersionUID = 1394745967;

    /**
     * The reference instance of <code>participant_state</code>
     */
    public static final ParticipantState PARTICIPANT_STATE = new ParticipantState();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParticipantStateRecord> getRecordType() {
        return ParticipantStateRecord.class;
    }

    /**
     * The column <code>participant_state.id</code>.
     */
    public final TableField<ParticipantStateRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('oes_1.participant_state_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>participant_state.username</code>.
     */
    public final TableField<ParticipantStateRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>participant_state.longterm_key</code>.
     */
    public final TableField<ParticipantStateRecord, byte[]> LONGTERM_KEY = createField("longterm_key", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>participant_state.conversation</code>.
     */
    public final TableField<ParticipantStateRecord, Long> CONVERSATION = createField("conversation", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>participant_state.remote_ephemeral_key_id</code>.
     */
    public final TableField<ParticipantStateRecord, Long> REMOTE_EPHEMERAL_KEY_ID = createField("remote_ephemeral_key_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>participant_state.remote_ephemeral_key</code>.
     */
    public final TableField<ParticipantStateRecord, byte[]> REMOTE_EPHEMERAL_KEY = createField("remote_ephemeral_key", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * Create a <code>participant_state</code> table reference
     */
    public ParticipantState() {
        this(DSL.name("participant_state"), null);
    }

    /**
     * Create an aliased <code>participant_state</code> table reference
     */
    public ParticipantState(String alias) {
        this(DSL.name(alias), PARTICIPANT_STATE);
    }

    /**
     * Create an aliased <code>participant_state</code> table reference
     */
    public ParticipantState(Name alias) {
        this(alias, PARTICIPANT_STATE);
    }

    private ParticipantState(Name alias, Table<ParticipantStateRecord> aliased) {
        this(alias, aliased, null);
    }

    private ParticipantState(Name alias, Table<ParticipantStateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ParticipantState(Table<O> child, ForeignKey<O, ParticipantStateRecord> key) {
        super(child, key, PARTICIPANT_STATE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PARTICIPANT_STATE_CONVERSATION_USERNAME_KEY, Indexes.PARTICIPANT_STATE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ParticipantStateRecord, Long> getIdentity() {
        return Keys.IDENTITY_PARTICIPANT_STATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ParticipantStateRecord> getPrimaryKey() {
        return Keys.PARTICIPANT_STATE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ParticipantStateRecord>> getKeys() {
        return Arrays.<UniqueKey<ParticipantStateRecord>>asList(Keys.PARTICIPANT_STATE_PKEY, Keys.PARTICIPANT_STATE_CONVERSATION_USERNAME_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ParticipantStateRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ParticipantStateRecord, ?>>asList(Keys.PARTICIPANT_STATE__PARTICIPANT_STATE_CONVERSATION_FKEY);
    }

    public Conversation conversation() {
        return new Conversation(this, Keys.PARTICIPANT_STATE__PARTICIPANT_STATE_CONVERSATION_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ParticipantState as(String alias) {
        return new ParticipantState(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ParticipantState as(Name alias) {
        return new ParticipantState(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ParticipantState rename(String name) {
        return new ParticipantState(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ParticipantState rename(Name name) {
        return new ParticipantState(name, null);
    }
}
