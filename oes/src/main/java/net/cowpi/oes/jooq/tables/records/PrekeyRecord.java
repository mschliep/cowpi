/*
 * This file is generated by jOOQ.
 */
package net.cowpi.oes.jooq.tables.records;


import javax.annotation.Generated;

import net.cowpi.oes.jooq.tables.Prekey;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PrekeyRecord extends UpdatableRecordImpl<PrekeyRecord> implements Record3<Long, byte[], byte[]> {

    private static final long serialVersionUID = -449689342;

    /**
     * Setter for <code>prekey.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>prekey.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>prekey.private_key</code>.
     */
    public void setPrivateKey(byte... value) {
        set(1, value);
    }

    /**
     * Getter for <code>prekey.private_key</code>.
     */
    public byte[] getPrivateKey() {
        return (byte[]) get(1);
    }

    /**
     * Setter for <code>prekey.public_key</code>.
     */
    public void setPublicKey(byte... value) {
        set(2, value);
    }

    /**
     * Getter for <code>prekey.public_key</code>.
     */
    public byte[] getPublicKey() {
        return (byte[]) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Long, byte[], byte[]> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Long, byte[], byte[]> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return Prekey.PREKEY.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field2() {
        return Prekey.PREKEY.PRIVATE_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field3() {
        return Prekey.PREKEY.PUBLIC_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] component2() {
        return getPrivateKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] component3() {
        return getPublicKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value2() {
        return getPrivateKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value3() {
        return getPublicKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrekeyRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrekeyRecord value2(byte... value) {
        setPrivateKey(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrekeyRecord value3(byte... value) {
        setPublicKey(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrekeyRecord values(Long value1, byte[] value2, byte[] value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PrekeyRecord
     */
    public PrekeyRecord() {
        super(Prekey.PREKEY);
    }

    /**
     * Create a detached, initialised PrekeyRecord
     */
    public PrekeyRecord(Long id, byte[] privateKey, byte[] publicKey) {
        super(Prekey.PREKEY);

        set(0, id);
        set(1, privateKey);
        set(2, publicKey);
    }
}
