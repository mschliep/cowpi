/*
 * This file is generated by jOOQ.
 */
package net.cowpi.server.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import net.cowpi.server.jooq.Indexes;
import net.cowpi.server.jooq.Keys;
import net.cowpi.server.jooq.Router;
import net.cowpi.server.jooq.tables.records.MailboxRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mailbox extends TableImpl<MailboxRecord> {

    private static final long serialVersionUID = -1992852752;

    /**
     * The reference instance of <code>router.mailbox</code>
     */
    public static final Mailbox MAILBOX = new Mailbox();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MailboxRecord> getRecordType() {
        return MailboxRecord.class;
    }

    /**
     * The column <code>router.mailbox.id</code>.
     */
    public final TableField<MailboxRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('router.mailbox_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>router.mailbox.user_to</code>.
     */
    public final TableField<MailboxRecord, Long> USER_TO = createField("user_to", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>router.mailbox.message</code>.
     */
    public final TableField<MailboxRecord, byte[]> MESSAGE = createField("message", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * Create a <code>router.mailbox</code> table reference
     */
    public Mailbox() {
        this(DSL.name("mailbox"), null);
    }

    /**
     * Create an aliased <code>router.mailbox</code> table reference
     */
    public Mailbox(String alias) {
        this(DSL.name(alias), MAILBOX);
    }

    /**
     * Create an aliased <code>router.mailbox</code> table reference
     */
    public Mailbox(Name alias) {
        this(alias, MAILBOX);
    }

    private Mailbox(Name alias, Table<MailboxRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mailbox(Name alias, Table<MailboxRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Mailbox(Table<O> child, ForeignKey<O, MailboxRecord> key) {
        super(child, key, MAILBOX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Router.ROUTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MAILBOX_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MailboxRecord, Long> getIdentity() {
        return Keys.IDENTITY_MAILBOX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MailboxRecord> getPrimaryKey() {
        return Keys.MAILBOX_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MailboxRecord>> getKeys() {
        return Arrays.<UniqueKey<MailboxRecord>>asList(Keys.MAILBOX_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MailboxRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MailboxRecord, ?>>asList(Keys.MAILBOX__MAILBOX_USER_TO_FKEY);
    }

    public CowpiUser cowpiUser() {
        return new CowpiUser(this, Keys.MAILBOX__MAILBOX_USER_TO_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mailbox as(String alias) {
        return new Mailbox(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mailbox as(Name alias) {
        return new Mailbox(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mailbox rename(String name) {
        return new Mailbox(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mailbox rename(Name name) {
        return new Mailbox(name, null);
    }
}
