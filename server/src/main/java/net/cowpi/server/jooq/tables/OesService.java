/*
 * This file is generated by jOOQ.
 */
package net.cowpi.server.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import net.cowpi.server.jooq.Indexes;
import net.cowpi.server.jooq.Keys;
import net.cowpi.server.jooq.Router;
import net.cowpi.server.jooq.tables.records.OesServiceRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OesService extends TableImpl<OesServiceRecord> {

    private static final long serialVersionUID = -1245694861;

    /**
     * The reference instance of <code>router.oes_service</code>
     */
    public static final OesService OES_SERVICE = new OesService();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OesServiceRecord> getRecordType() {
        return OesServiceRecord.class;
    }

    /**
     * The column <code>router.oes_service.id</code>.
     */
    public final TableField<OesServiceRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('router.oes_service_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>router.oes_service.oes_name</code>.
     */
    public final TableField<OesServiceRecord, String> OES_NAME = createField("oes_name", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * Create a <code>router.oes_service</code> table reference
     */
    public OesService() {
        this(DSL.name("oes_service"), null);
    }

    /**
     * Create an aliased <code>router.oes_service</code> table reference
     */
    public OesService(String alias) {
        this(DSL.name(alias), OES_SERVICE);
    }

    /**
     * Create an aliased <code>router.oes_service</code> table reference
     */
    public OesService(Name alias) {
        this(alias, OES_SERVICE);
    }

    private OesService(Name alias, Table<OesServiceRecord> aliased) {
        this(alias, aliased, null);
    }

    private OesService(Name alias, Table<OesServiceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OesService(Table<O> child, ForeignKey<O, OesServiceRecord> key) {
        super(child, key, OES_SERVICE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Router.ROUTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OES_SERVICE_OES_NAME_KEY, Indexes.OES_SERVICE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OesServiceRecord, Long> getIdentity() {
        return Keys.IDENTITY_OES_SERVICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OesServiceRecord> getPrimaryKey() {
        return Keys.OES_SERVICE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OesServiceRecord>> getKeys() {
        return Arrays.<UniqueKey<OesServiceRecord>>asList(Keys.OES_SERVICE_PKEY, Keys.OES_SERVICE_OES_NAME_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OesService as(String alias) {
        return new OesService(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OesService as(Name alias) {
        return new OesService(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OesService rename(String name) {
        return new OesService(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OesService rename(Name name) {
        return new OesService(name, null);
    }
}
